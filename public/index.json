[{"content":"Let\u0026rsquo;s get started! As I had mentioned in a previous post, my desire is to eventually host everything on my own infrastructure and if time permits try to use a DIY solution. However, given that I want to start sharing my journey from day 0, I need a temporary solution that is reliable, quick to setup, and requires minimal effort. Today, I would like to share how I setup this blog using a static website generator Hugo hosted on Github Pages with a Custom DNS using Cloudflare.\nHugo Hugo is one of the most popular open-source static site generators. I have used it several times in the past for previous iterations of this blog and have found it a my goto choice when I need something quick.\nSince I most likely will not be able to do better job than the [quick-start] guide found on Hugo\u0026rsquo;s documentation site I will be a bit brief in this portion. I started with creating a new repository on Github for this site, aptly named chunwu.dev, and cloned the repository down onto my local machine.\nPlease note that if you decide not to have a custom domain for your site and wish to leverage the default domain that Github provides you must setup your repository name as \u0026lt;user\u0026gt;.github.io. Otherwise your domain will come out as \u0026lt;user\u0026gt;.github.com/\u0026lt;repository-name\u0026gt;, which may not be ideal.\nAfter I had Hugo installed and my Github repository cloned onto my machine, I created my site using the command hugo new site \u0026lt;repository\u0026gt;. Personally, I am a visual person so I start the web server right away with the defaults before I start modifying the site. You can do this by running hugo server -D in the directory of your site.\n*We are using -D to ensure that draft publications are also show locally but when running live we simply use hugo server.\nThere are many places on the web where you can find Hugo themes. However, for today I used https://themes.gohugo.io/ and after brief search I settled on a blog theme called PaperMod.\nI made some quick adjustments to my hugo.toml - a file used you to specify how you want the site. This can be it\u0026rsquo;s own tutorial For now I simply want to enable the theme, so I run echo \u0026quot;theme = PaperMod\u0026quot; \u0026gt;\u0026gt; hugo.toml. (hugo.toml and config.toml are interchangeable)\nYou should now be able to run your website.\nGithub Pages Now that you have a functioning website locally, we commit the code back to your remote repository. We won\u0026rsquo;t dive into the specifics of how to use Github as a Code Versioning System or leveraging Github Actions for CICD, I have implemented Github Actions on my repository to automate deployment This can also be discussed in a future tutorial if there is a desire for it.\nFor now once we have a running website from the previous step, within your working directory. I ran the following commands:\ngit commit . git commit -m \u0026#34;Initial Commit\u0026#34; git push Once your website is in the remote repository\u0026hellip;\nNavigate to the Settings of your repository. On the left menu bar navigate to Pages. For Build and deployment, I have set my source as Github Actions. Go back to your local repository and create a folder called workflows inside a folder called .github Copy and paste the following YAML into a file like main.yaml # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - master # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.126.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production TZ: America/Los_Angeles run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Almost there, we need to commit the changes from our local repository to our remote repository. At the root of your local repository:\ngit commit . git commit -m \u0026#34;Added a Github Action\u0026#34; git push If you navigate to your repository on Github and look at the Actions tab you should notice there is a workflow running called Deploy Hugo site to Pages. Once this Github Action runs it\u0026rsquo;s course you should be able to navigate to the domain Github provides you by default, in my case it is: https://cpwu.github.io/chunwu.dev/. When we setup Github Pages, you may have noticed a textbox under Custom domain that you can specify, it really is that simple.\nLet\u0026rsquo;s get a custom domain from Cloudflare\nCloudflare I have used a few domain name registrars in the past but most recently I moved over to Cloudflare. From what I understand, they offer domain registration with no mark-up pricing. However, there is a drawback some tlds may not be available. Luckily for me Cloudflare opened up the ability to purchase .dev domain\u0026rsquo;s last year. If you are not aware .dev must use an SSL certificate in order to load in major browsers. Github will take care if this for us.\nTo purchase a domain, create yourself an account on Cloudflare if you haven\u0026rsquo;t done so already and navigate to Domain Registration.\nUnder Domain Registration navigate to Register Domains. Search for the desired domain name you are looking for. In my case chunwu.dev was available for $10.18 USD. Add an A record for your newly purchased domain by specifying your domain name under Name and 185.199.108.153 for content. You can find the other Github IP addresses for Github pages here Website up! Now that you have your domain name setup, and your website published to Github pages you just need to navigate back to the Settings of your site\u0026rsquo;s Github repository. You should now be able to specify the domain name you purchased with Cloudflare into the textbox and after a few minutes your site will be live on the internet with a custom domain.\nAs previously mentioned, make sure you select the Enforce HTTPS option since this is a requirement for .dev domains and generally a good practice.\n","permalink":"http://localhost:1313/posts/blog-setup/","summary":"Let\u0026rsquo;s get started! As I had mentioned in a previous post, my desire is to eventually host everything on my own infrastructure and if time permits try to use a DIY solution. However, given that I want to start sharing my journey from day 0, I need a temporary solution that is reliable, quick to setup, and requires minimal effort. Today, I would like to share how I setup this blog using a static website generator Hugo hosted on Github Pages with a Custom DNS using Cloudflare.","title":"Custom Domain on Github Pages with Cloudflare"},{"content":"Where have I been? In the previous iteration of this website (there have been many iterations before it). I was running chunwu.dev using Hugo. The site was hosted in Azure Storage and leveraged Azure\u0026rsquo;s Content Delivery Network.\nMy hope was that by having a web presence, it would force me to blog about all the various things I am working on - as they say, you don\u0026rsquo;t understand a topic until you can teach it. With the goal that I would share some knowledge and inspire the next person, as many have done for me. The Problem\u0026hellip; blogging requires time and commitment.\nIn the last 4 years, I have:\nmade a huge pivot in my career. moved to another country. got married. And most recently, my wife and I welcomed our son - Aiden. What am I trying to achieve? My personal goal is to have a miniaturized version of the PaaS (Platform as a Service) environment that I am developing at scale for work. Whenever you work on projects that have the scale that I typically work at, we do not typically get the opportunity to work on all aspects of the platform - as there is just too much to do. Building my homelab would help me understand various technologies in detail and if something breaks, I will at least have an idea how to triage.\nWhat have I done so far? Up to this point, I am running a Kubernetes cluster using 4 Raspberry Pi 4B 8GB. It is configured using one node as the Control Plane and 3 nodes for the data plane. I have a few stateless applications running that have been exposed to the internet using Cloudflare\u0026rsquo;s Zero Trust tunnel, and a monitoring stack using Prometheus, Grafana and Alert Manager.\nIf this all sounds interesting to you, great! The existing infrastructure is a bit janky and is a major motivation for today\u0026rsquo;s post.\nWhat is next? Initially when I completed custom writing a blogging solution using Python and the Flask framework to kick things off, I encountered my first hurdle. Every time I made a breaking change to my homelab the data would be wiped.\nSo, as a temporary solution until my homelab stabilizes, I will be using Hugo once again which I will host using Github Pages made available from my custom DNS.\nStay tuned for weekly posts!\n-Chun\n","permalink":"http://localhost:1313/posts/im-back/","summary":"Where have I been? In the previous iteration of this website (there have been many iterations before it). I was running chunwu.dev using Hugo. The site was hosted in Azure Storage and leveraged Azure\u0026rsquo;s Content Delivery Network.\nMy hope was that by having a web presence, it would force me to blog about all the various things I am working on - as they say, you don\u0026rsquo;t understand a topic until you can teach it.","title":"I am back... again!"}]